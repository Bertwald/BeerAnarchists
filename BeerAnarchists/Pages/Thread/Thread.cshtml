@page
@using Forum.Data.Models;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ForumUser> UserManager;
@inject SignInManager<ForumUser> SignInManager;
@model BeerAnarchists.Pages.Thread.ThreadModel
@{
    ViewData["Title"] = Model.Title;
    var user = await UserManager.GetUserAsync(User);
}

<script>
  function AddReaction(userId, postId, Like){

  }
</script>
@functions{

  async Task DisplayPostsAsTree(IEnumerable<Forum.Data.Models.ForumPost> posts, int alternation, string userID, int depth = 0) {
        @foreach (var post in posts)
        {
          //class="border-start border-secondary border-3"
                <div style="padding-left:@(Math.Min(depth * 20, 120))px;">
                    @{
                        await DisplayPost(post, alternation*2+depth%2, userID);
                      }
                </div>
                @if (post.Replies != null && post.Replies.Any())
                {
                    await DisplayPostsAsTree(post.Replies, alternation, userID, depth+1);
                }
        }
    }
    async Task DisplayPost(Forum.Data.Models.ForumPost post, int colorIndex, string UserId) {
        //var Color = new string[]{ "#999999", "#6B6B6B", "#808080", "#5C5C5C" }[colorIndex];
        var Color = new string[]{ "#DDA0DD", "#C54B8C", "#D8BFD8", "#E0B0FF" }[colorIndex];
        var bordercolor = (await UserManager.IsInRoleAsync(post.Author, "Admin")) ? "silver" : "black";
        <div style="background-color:@Color; border: 1px solid @bordercolor; padding:5px; margin: 5px 0px 5px 0px; ">
      <div class="row" style="border-bottom: 1px solid black; margin:5px; padding:5px">
        <div class="col" style="text-align:left">
          @post.Author @(post.Ancestor == null ? "wrote:" : "replied:")
        </div>
        <div class="col" style="text-align:right">
          #@post.Id
        </div>
      </div>
      <div class="border border-dark rounded" style="background-color:floralwhite; padding:5px 15px 5px 15px">
        @post.Content
      </div>
      <div class="row">
        <div class="col btn-group-sm">
        <a class="btn btn-primary btn-sm" asp-page="/AddReaction" asp-route-userId=@UserId asp-route-postId=@post.Id asp-route-threadId=@Model.Id asp-route-type=@ReactionType.Like>
          Like 
          <span class="badge rounded-pill bg-light text-dark"> 
            @post.Reactions.Where(x => x.Type == Forum.Data.Models.ReactionType.Like).Count()
          </span>
        </a>
        <a class="btn btn-primary btn-sm" asp-page="/AddReaction" asp-route-userId=@UserId asp-route-postId=@post.Id asp-route-threadId=@Model.Id asp-route-type=@ReactionType.Dislike>
          Dislike 
          <span class="badge rounded-pill bg-light text-dark"> 
            @post.Reactions.Where(x => x.Type == Forum.Data.Models.ReactionType.Dislike).Count()
           </span>
        </a>
        <a class="btn btn-primary btn-sm" asp-page="/AddReaction" asp-route-userId=@UserId asp-route-postId=@post.Id asp-route-threadId=@Model.Id asp-route-type=@ReactionType.Heart>
          Heart 
          <span class="badge rounded-pill bg-light text-dark"> 
            @post.Reactions.Where(x => x.Type == Forum.Data.Models.ReactionType.Heart).Count()
          </span>
        </a>
        <a class="btn btn-danger btn-sm" asp-page="/PostReport">
        Report!
        </a>
        </div>
        <div class="col" style="text-align:right">
                    @if (User.Claims.Any())
                    {
                        <a class="btn btn-secondary btn-sm" asp-page="/Post/PostReply" asp-route-postId="@post.Id">Reply</a>
                    }
        </div>

        <div class="col" style="text-align:right">
          @post.Created
        </div>
      </div>
      </div>
    }
}

<div>
    <h3 class="display-4 text-center">Welcome to the Beer-Anarchists Forum</h3>

    @if (SignInManager.IsSignedIn(User))
    {
        <span id="postBtn">
            <a asp-page="/Post/NewPost" asp-route-threadId=@Model.Id asp-route-userId=@user?.Id class="btn-secondary">
        Make a new Post!
      </a>
    </span>
    }

    <div class="text-left">
        @{
            int outerAlternation = 0;
        }
        @if(Model.Posts != null){
            await DisplayPostsAsTree(Model.Posts.Where(x => x.Ancestor is null), outerAlternation, user.Id ,0);
            outerAlternation = outerAlternation++ % 2;
        }
    </div>


</div>
